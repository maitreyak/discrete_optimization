# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ExampleInterface', [dirname(__file__)])
        except ImportError:
            import _ExampleInterface
            return _ExampleInterface
        if fp is not None:
            try:
                _mod = imp.load_module('_ExampleInterface', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ExampleInterface = swig_import_helper()
    del swig_import_helper
else:
    import _ExampleInterface
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class ExampleInterface_Expression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_Expression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_Expression, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nbj_ident"] = _ExampleInterface.ExampleInterface_Expression_nbj_ident_set
    __swig_getmethods__["nbj_ident"] = _ExampleInterface.ExampleInterface_Expression_nbj_ident_get
    if _newclass:nbj_ident = _swig_property(_ExampleInterface.ExampleInterface_Expression_nbj_ident_get, _ExampleInterface.ExampleInterface_Expression_nbj_ident_set)
    def has_been_added(self): return _ExampleInterface.ExampleInterface_Expression_has_been_added(self)
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_Expression(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_Expression
    __del__ = lambda self : None;
    def getVariableId(self): return _ExampleInterface.ExampleInterface_Expression_getVariableId(self)
    def get_value(self): return _ExampleInterface.ExampleInterface_Expression_get_value(self)
    def get_size(self): return _ExampleInterface.ExampleInterface_Expression_get_size(self)
    def get_min(self): return _ExampleInterface.ExampleInterface_Expression_get_min(self)
    def get_max(self): return _ExampleInterface.ExampleInterface_Expression_get_max(self)
    def contain(self, *args): return _ExampleInterface.ExampleInterface_Expression_contain(self, *args)
    def add(self, *args): return _ExampleInterface.ExampleInterface_Expression_add(self, *args)
ExampleInterface_Expression_swigregister = _ExampleInterface.ExampleInterface_Expression_swigregister
ExampleInterface_Expression_swigregister(ExampleInterface_Expression)

class ExampleInterface_IntVar(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_IntVar, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_IntVar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_IntVar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_IntVar
    __del__ = lambda self : None;
ExampleInterface_IntVar_swigregister = _ExampleInterface.ExampleInterface_IntVar_swigregister
ExampleInterface_IntVar_swigregister(ExampleInterface_IntVar)

class ExampleInterface_Min(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_Min, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_Min, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_Min(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_Min
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_Min_add(self, *args)
ExampleInterface_Min_swigregister = _ExampleInterface.ExampleInterface_Min_swigregister
ExampleInterface_Min_swigregister(ExampleInterface_Min)

class ExampleInterface_Max(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_Max, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_Max, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_Max(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_Max
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_Max_add(self, *args)
ExampleInterface_Max_swigregister = _ExampleInterface.ExampleInterface_Max_swigregister
ExampleInterface_Max_swigregister(ExampleInterface_Max)

class ExampleInterface_AllDiff(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_AllDiff, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_AllDiff, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_AllDiff(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_AllDiff
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_AllDiff_add(self, *args)
ExampleInterface_AllDiff_swigregister = _ExampleInterface.ExampleInterface_AllDiff_swigregister
ExampleInterface_AllDiff_swigregister(ExampleInterface_AllDiff)

class ExampleInterface_Gcc(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_Gcc, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_Gcc, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_Gcc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_Gcc
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_Gcc_add(self, *args)
ExampleInterface_Gcc_swigregister = _ExampleInterface.ExampleInterface_Gcc_swigregister
ExampleInterface_Gcc_swigregister(ExampleInterface_Gcc)

class ExampleInterface_Element(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_Element, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_Element, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_Element(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_Element
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_Element_add(self, *args)
ExampleInterface_Element_swigregister = _ExampleInterface.ExampleInterface_Element_swigregister
ExampleInterface_Element_swigregister(ExampleInterface_Element)

class ExampleInterface_LeqLex(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_LeqLex, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_LeqLex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_LeqLex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_LeqLex
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_LeqLex_add(self, *args)
ExampleInterface_LeqLex_swigregister = _ExampleInterface.ExampleInterface_LeqLex_swigregister
ExampleInterface_LeqLex_swigregister(ExampleInterface_LeqLex)

class ExampleInterface_LessLex(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_LessLex, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_LessLex, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_LessLex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_LessLex
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_LessLex_add(self, *args)
ExampleInterface_LessLex_swigregister = _ExampleInterface.ExampleInterface_LessLex_swigregister
ExampleInterface_LessLex_swigregister(ExampleInterface_LessLex)

class ExampleInterface_Sum(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_Sum, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_Sum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_Sum(*args)
        try: self.this.append(this)
        except: self.this = this
    def addVar(self, *args): return _ExampleInterface.ExampleInterface_Sum_addVar(self, *args)
    def addWeight(self, *args): return _ExampleInterface.ExampleInterface_Sum_addWeight(self, *args)
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_Sum
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_Sum_add(self, *args)
ExampleInterface_Sum_swigregister = _ExampleInterface.ExampleInterface_Sum_swigregister
ExampleInterface_Sum_swigregister(ExampleInterface_Sum)

class ExampleInterface_binop(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_binop, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_binop, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def arity(self): return _ExampleInterface.ExampleInterface_binop_arity(self)
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_binop
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_binop_add(self, *args)
ExampleInterface_binop_swigregister = _ExampleInterface.ExampleInterface_binop_swigregister
ExampleInterface_binop_swigregister(ExampleInterface_binop)

class ExampleInterface_mul(ExampleInterface_binop):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_mul, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_mul, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_mul(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_mul
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_mul_add(self, *args)
ExampleInterface_mul_swigregister = _ExampleInterface.ExampleInterface_mul_swigregister
ExampleInterface_mul_swigregister(ExampleInterface_mul)

class ExampleInterface_div(ExampleInterface_binop):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_div, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_div, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_div(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_div
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_div_add(self, *args)
ExampleInterface_div_swigregister = _ExampleInterface.ExampleInterface_div_swigregister
ExampleInterface_div_swigregister(ExampleInterface_div)

class ExampleInterface_mod(ExampleInterface_binop):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_mod, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_mod, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_mod(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_mod
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_mod_add(self, *args)
ExampleInterface_mod_swigregister = _ExampleInterface.ExampleInterface_mod_swigregister
ExampleInterface_mod_swigregister(ExampleInterface_mod)

class ExampleInterface_and(ExampleInterface_binop):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_and, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_and, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_and(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_and
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_and_add(self, *args)
ExampleInterface_and_swigregister = _ExampleInterface.ExampleInterface_and_swigregister
ExampleInterface_and_swigregister(ExampleInterface_and)

class ExampleInterface_or(ExampleInterface_binop):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_or, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_or, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_or(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_or
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_or_add(self, *args)
ExampleInterface_or_swigregister = _ExampleInterface.ExampleInterface_or_swigregister
ExampleInterface_or_swigregister(ExampleInterface_or)

class ExampleInterface_eq(ExampleInterface_binop):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_eq, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_eq, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_eq(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_eq
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_eq_add(self, *args)
ExampleInterface_eq_swigregister = _ExampleInterface.ExampleInterface_eq_swigregister
ExampleInterface_eq_swigregister(ExampleInterface_eq)

class ExampleInterface_ne(ExampleInterface_binop):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_ne, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_ne, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_ne(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_ne
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_ne_add(self, *args)
ExampleInterface_ne_swigregister = _ExampleInterface.ExampleInterface_ne_swigregister
ExampleInterface_ne_swigregister(ExampleInterface_ne)

class ExampleInterface_le(ExampleInterface_binop):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_le, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_le, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_le(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_le
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_le_add(self, *args)
ExampleInterface_le_swigregister = _ExampleInterface.ExampleInterface_le_swigregister
ExampleInterface_le_swigregister(ExampleInterface_le)

class ExampleInterface_ge(ExampleInterface_binop):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_ge, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_ge, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_ge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_ge
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_ge_add(self, *args)
ExampleInterface_ge_swigregister = _ExampleInterface.ExampleInterface_ge_swigregister
ExampleInterface_ge_swigregister(ExampleInterface_ge)

class ExampleInterface_lt(ExampleInterface_binop):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_lt, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_lt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_lt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_lt
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_lt_add(self, *args)
ExampleInterface_lt_swigregister = _ExampleInterface.ExampleInterface_lt_swigregister
ExampleInterface_lt_swigregister(ExampleInterface_lt)

class ExampleInterface_gt(ExampleInterface_binop):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_gt, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_binop]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_gt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_gt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_gt
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_gt_add(self, *args)
ExampleInterface_gt_swigregister = _ExampleInterface.ExampleInterface_gt_swigregister
ExampleInterface_gt_swigregister(ExampleInterface_gt)

class ExampleInterface_Minimise(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_Minimise, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_Minimise, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_Minimise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_Minimise
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_Minimise_add(self, *args)
ExampleInterface_Minimise_swigregister = _ExampleInterface.ExampleInterface_Minimise_swigregister
ExampleInterface_Minimise_swigregister(ExampleInterface_Minimise)

class ExampleInterface_Maximise(ExampleInterface_Expression):
    __swig_setmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterface_Maximise, name, value)
    __swig_getmethods__ = {}
    for _s in [ExampleInterface_Expression]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterface_Maximise, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ExampleInterface.new_ExampleInterface_Maximise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterface_Maximise
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterface_Maximise_add(self, *args)
ExampleInterface_Maximise_swigregister = _ExampleInterface.ExampleInterface_Maximise_swigregister
ExampleInterface_Maximise_swigregister(ExampleInterface_Maximise)

class ExampleInterfaceSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterfaceSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterfaceSolver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["first_decision_level"] = _ExampleInterface.ExampleInterfaceSolver_first_decision_level_set
    __swig_getmethods__["first_decision_level"] = _ExampleInterface.ExampleInterfaceSolver_first_decision_level_get
    if _newclass:first_decision_level = _swig_property(_ExampleInterface.ExampleInterfaceSolver_first_decision_level_get, _ExampleInterface.ExampleInterfaceSolver_first_decision_level_set)
    __swig_setmethods__["saved_level"] = _ExampleInterface.ExampleInterfaceSolver_saved_level_set
    __swig_getmethods__["saved_level"] = _ExampleInterface.ExampleInterfaceSolver_saved_level_get
    if _newclass:saved_level = _swig_property(_ExampleInterface.ExampleInterfaceSolver_saved_level_get, _ExampleInterface.ExampleInterfaceSolver_saved_level_set)
    def __init__(self): 
        this = _ExampleInterface.new_ExampleInterfaceSolver()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterfaceSolver
    __del__ = lambda self : None;
    def add(self, *args): return _ExampleInterface.ExampleInterfaceSolver_add(self, *args)
    def initialise(self, *args): return _ExampleInterface.ExampleInterfaceSolver_initialise(self, *args)
    def solve(self): return _ExampleInterface.ExampleInterfaceSolver_solve(self)
    def solveAndRestart(self, *args): return _ExampleInterface.ExampleInterfaceSolver_solveAndRestart(self, *args)
    def startNewSearch(self): return _ExampleInterface.ExampleInterfaceSolver_startNewSearch(self)
    def getNextSolution(self): return _ExampleInterface.ExampleInterfaceSolver_getNextSolution(self)
    def sacPreprocess(self, *args): return _ExampleInterface.ExampleInterfaceSolver_sacPreprocess(self, *args)
    def next(self, *args): return _ExampleInterface.ExampleInterfaceSolver_next(self, *args)
    def get_level(self): return _ExampleInterface.ExampleInterfaceSolver_get_level(self)
    def propagate(self): return _ExampleInterface.ExampleInterfaceSolver_propagate(self)
    def save(self): return _ExampleInterface.ExampleInterfaceSolver_save(self)
    def post(self, *args): return _ExampleInterface.ExampleInterfaceSolver_post(self, *args)
    def undo(self, *args): return _ExampleInterface.ExampleInterfaceSolver_undo(self, *args)
    def deduce(self, *args): return _ExampleInterface.ExampleInterfaceSolver_deduce(self, *args)
    def branch_right(self): return _ExampleInterface.ExampleInterfaceSolver_branch_right(self)
    def store_solution(self): return _ExampleInterface.ExampleInterfaceSolver_store_solution(self)
    def setHeuristic(self, *args): return _ExampleInterface.ExampleInterfaceSolver_setHeuristic(self, *args)
    def setFailureLimit(self, *args): return _ExampleInterface.ExampleInterfaceSolver_setFailureLimit(self, *args)
    def setNodeLimit(self, *args): return _ExampleInterface.ExampleInterfaceSolver_setNodeLimit(self, *args)
    def setTimeLimit(self, *args): return _ExampleInterface.ExampleInterfaceSolver_setTimeLimit(self, *args)
    def setVerbosity(self, *args): return _ExampleInterface.ExampleInterfaceSolver_setVerbosity(self, *args)
    def setRandomized(self, *args): return _ExampleInterface.ExampleInterfaceSolver_setRandomized(self, *args)
    def setRandomSeed(self, *args): return _ExampleInterface.ExampleInterfaceSolver_setRandomSeed(self, *args)
    def forceFiniteDomain(self, *args): return _ExampleInterface.ExampleInterfaceSolver_forceFiniteDomain(self, *args)
    def addNogood(self, *args): return _ExampleInterface.ExampleInterfaceSolver_addNogood(self, *args)
    def guide(self, *args): return _ExampleInterface.ExampleInterfaceSolver_guide(self, *args)
    def backtrackTo(self, *args): return _ExampleInterface.ExampleInterfaceSolver_backtrackTo(self, *args)
    def upOneLevel(self): return _ExampleInterface.ExampleInterfaceSolver_upOneLevel(self)
    def presolve(self): return _ExampleInterface.ExampleInterfaceSolver_presolve(self)
    def assign(self, *args): return _ExampleInterface.ExampleInterfaceSolver_assign(self, *args)
    def increase_init_level(self, *args): return _ExampleInterface.ExampleInterfaceSolver_increase_init_level(self, *args)
    def decrease_init_level(self, *args): return _ExampleInterface.ExampleInterfaceSolver_decrease_init_level(self, *args)
    def reset(self, *args): return _ExampleInterface.ExampleInterfaceSolver_reset(self, *args)
    def setLowerBounds(self, *args): return _ExampleInterface.ExampleInterfaceSolver_setLowerBounds(self, *args)
    def setUpperBounds(self, *args): return _ExampleInterface.ExampleInterfaceSolver_setUpperBounds(self, *args)
    def setRestartNogood(self): return _ExampleInterface.ExampleInterfaceSolver_setRestartNogood(self)
    def is_opt(self): return _ExampleInterface.ExampleInterfaceSolver_is_opt(self)
    def is_sat(self): return _ExampleInterface.ExampleInterfaceSolver_is_sat(self)
    def is_unsat(self): return _ExampleInterface.ExampleInterfaceSolver_is_unsat(self)
    def printStatistics(self): return _ExampleInterface.ExampleInterfaceSolver_printStatistics(self)
    def getBacktracks(self): return _ExampleInterface.ExampleInterfaceSolver_getBacktracks(self)
    def getNodes(self): return _ExampleInterface.ExampleInterfaceSolver_getNodes(self)
    def getFailures(self): return _ExampleInterface.ExampleInterfaceSolver_getFailures(self)
    def getChecks(self): return _ExampleInterface.ExampleInterfaceSolver_getChecks(self)
    def getPropags(self): return _ExampleInterface.ExampleInterfaceSolver_getPropags(self)
    def getTime(self): return _ExampleInterface.ExampleInterfaceSolver_getTime(self)
    def getRandomNumber(self): return _ExampleInterface.ExampleInterfaceSolver_getRandomNumber(self)
    def getNumVariables(self): return _ExampleInterface.ExampleInterfaceSolver_getNumVariables(self)
    def getNumConstraints(self): return _ExampleInterface.ExampleInterfaceSolver_getNumConstraints(self)
    def num_vars(self): return _ExampleInterface.ExampleInterfaceSolver_num_vars(self)
    def get_degree(self, *args): return _ExampleInterface.ExampleInterfaceSolver_get_degree(self, *args)
ExampleInterfaceSolver_swigregister = _ExampleInterface.ExampleInterfaceSolver_swigregister
ExampleInterfaceSolver_swigregister(ExampleInterfaceSolver)

class ExampleInterfaceExpArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterfaceExpArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterfaceExpArray, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ExampleInterface.new_ExampleInterfaceExpArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterfaceExpArray
    __del__ = lambda self : None;
    def size(self): return _ExampleInterface.ExampleInterfaceExpArray_size(self)
    def add(self, *args): return _ExampleInterface.ExampleInterfaceExpArray_add(self, *args)
    def get_item(self, *args): return _ExampleInterface.ExampleInterfaceExpArray_get_item(self, *args)
    def set_item(self, *args): return _ExampleInterface.ExampleInterfaceExpArray_set_item(self, *args)
ExampleInterfaceExpArray_swigregister = _ExampleInterface.ExampleInterfaceExpArray_swigregister
ExampleInterfaceExpArray_swigregister(ExampleInterfaceExpArray)

class ExampleInterfaceIntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterfaceIntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterfaceIntArray, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ExampleInterface.new_ExampleInterfaceIntArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterfaceIntArray
    __del__ = lambda self : None;
    def size(self): return _ExampleInterface.ExampleInterfaceIntArray_size(self)
    def add(self, *args): return _ExampleInterface.ExampleInterfaceIntArray_add(self, *args)
    def get_item(self, *args): return _ExampleInterface.ExampleInterfaceIntArray_get_item(self, *args)
    def set_item(self, *args): return _ExampleInterface.ExampleInterfaceIntArray_set_item(self, *args)
ExampleInterfaceIntArray_swigregister = _ExampleInterface.ExampleInterfaceIntArray_swigregister
ExampleInterfaceIntArray_swigregister(ExampleInterfaceIntArray)

class ExampleInterfaceDoubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExampleInterfaceDoubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ExampleInterfaceDoubleArray, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ExampleInterface.new_ExampleInterfaceDoubleArray()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ExampleInterface.delete_ExampleInterfaceDoubleArray
    __del__ = lambda self : None;
    def size(self): return _ExampleInterface.ExampleInterfaceDoubleArray_size(self)
    def add(self, *args): return _ExampleInterface.ExampleInterfaceDoubleArray_add(self, *args)
    def get_item(self, *args): return _ExampleInterface.ExampleInterfaceDoubleArray_get_item(self, *args)
    def set_item(self, *args): return _ExampleInterface.ExampleInterfaceDoubleArray_set_item(self, *args)
ExampleInterfaceDoubleArray_swigregister = _ExampleInterface.ExampleInterfaceDoubleArray_swigregister
ExampleInterfaceDoubleArray_swigregister(ExampleInterfaceDoubleArray)




    
import Numberjack

class Solver(Numberjack.NBJ_STD_Solver):
    def __init__(self, model=None, X=None, FD=False, clause_limit=-1):
        Numberjack.NBJ_STD_Solver.__init__(self, "ExampleInterface", "ExampleInterface", model, X, FD,
            clause_limit)
    
                